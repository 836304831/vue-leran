
功能介绍

1. FeatureView的封装
    独立组件封装FeatureView
        - div -> img

2. TabControl封装
    独立组件的封装
        - props -> titles
        - div -> 根据titles v-for 遍历div->span
        - css 相关
        - 选用哪一个tab，哪一个tab的文件颜色改变，下面加上border-botton
            - 使用currentIndex判断当前指向哪一个tab

3. 首页商品数据的请求
    3.1 设计数据结构，用于保存数据，将Home.vue
    3.2 发送数据请求：见 network目录

4. 对商品数据进行展示
    4.1 封装GoodList.vue组件
    4.2 封装GoodListItem.vue组件

5. 对滚进行重构，使用beter-scroll
    5.1 对BackTop.vue组件进行封装，使用见18-补充
    5.2 在Vue项目中使用better-scroll，见home.vue

6. 回到顶部BackTop
    6.1 对BackTop.vue组件的封装
    6.2 如何监听组件的点击
        直接监听back-top的点击，监听是必须添加修饰符.native
        回到顶部
            - scrool对象，scrool.scrollTo(x, y, time)
            - this.$ref.scroll.scrollTo(0, 0, 500)
    6.3 BackTop组件的显示和隐藏
        isShowBackTop: false
        监听滚动，拿到滚动的位置
            - -position > 1000 —> isShowBackTop: true
            - isShowBackTop = -position.y > 1000

7. 解决首页中可滚动区域的问题（图片加载延迟导致）
    7.1 better-scroll在决定有多少区域可以滚动时，是根据scrollHeight属性巨顶
        - scrollHeight属性是放Better-scroll的content中的子组件的高度
        - 但在首页中，刚开始计算scrollHeight属性时，因为图片的延迟加载，没有将图片计算在内，导致计算的结果是错误的
        - 图片加载后有了新的高度，但scrollHeight属性值没有更新，导致滚动出现问题
    7.2 解决滚动出现不正确的问题
        - 监听每一张图片是否加载完成，一旦有图片加载完成，执行一个scroll.refresh，触发重新计算scrollHeight
        - 监听图片加载完成
            - 原生的js监听图片：img.onload=function() {}
            - Vue中监听，@load=”方法“
        调用scroll.refresh,触发计算scrollHeight
    7.3 如何见goodsListItem.vue中的事件传入Home.vue（非父子组件通讯）
        - 非父子组件通讯，次奥也能够事件总线
            - bus->总线
            - Vue.prototype.$bus=new Vue（）
            - this.bus.emit("事件名称", 参数)
            - this.bus.on("事件名称", 回调函数(参数))
    7.4 refresh找不到问题
        - 在scroll.vue中，调用this.scroll方法之前，判断this.scroll对象是否有值
        - 在mounted生命周期函数中使用this.$refs.scrool而不是定义在created中
    7.5 对于refresh调用非常频繁，影响性能，需要进行防抖操作
        - 防抖debounce/节流throttle
        - 防抖函数起作用过程
            - 如果我们直接执行refresh,那么refresh函数会加载一张图片执行一次
            - 可以将refresh函数传入debounce函数，生成一个新的函数
            - 之后在调用非常频繁的时候，就使用新生成的函数
            - 新生成的函数并不会频繁的带哦用，如果下一次执行的非常快，那么会见上一次取消掉

8. 上来加载更多功能实现

9. tabControl的吸顶效果
    9.1 获取tabControl的off
        必须知道滚动到多少时，开始有吸顶效果，这个时候需要获取tabControl的offsetTop
        若直接在mounted中获取tabControl的offsetTop，那么值是不正确的
        解决方法（也可以在监听所有图片加载完成，多次获取tabControl的offsetTop）：
            监听HomeSwiper中img加载完成事件
            加载完成后，发出事件，在home.vue中，再去获取tabControl的offsetTop
    9.2 监听滚动，动态的改变tabControl的样式
        问题：动态改变tabControl的样式时出现两个问题
            问题1：下面的商品内容，会突然上衣
            问题2：tabControl虽然设置了fixed，但是也会随着better scroll一起滚出去
        解决方案：
            - 在最上面，多复制一份PlaceHolder tabControl组件对象，利用它实现停留效果
            - 当用户鼓捣弄到一定位置时，PlaceHolder tabControl组件就显示出来
            - 但用户滚动达到一定位置时，PlaceHolder tabControl组件隐藏起来

10. 让Home在切换到其他tab-bar之后在切换回来依然保持原来的状态
    10.1 让Home不要销毁掉
        使用keep-alive（将App.vue）
            <keep-alive>
              <router-view/>
            </keep-alive>
    10.2 让Home中的内容保持原来的位置(见Home.vue)
        离开时，保存一个位置信息SaveY
        进来时，将位置设置为原来保存的saveY即可（）
            activated() {
              console.log('actived');
              this.$refs.scrol.scrollTo(0, -this.saveY, 0)
              this.$refs.scroll.refresh()
            },
            deactivated() {
              this.saveY = this.$refs.scroll.getScrollY()
              console.log(this.saveY);
            }
11. mixin的使用
    11.1 创建混入对象：const mixin = {}
    11.2 组件对象中： mixins: [mixin]

12. 商品详情展示部分：标题和内容的联动效果
    12.1 点击标题，滚动到对应的主题内容
        - 在detail中监听标题的点击，获取index
        - 滚动到对应的对应内容位置：
            - 获取所有主题组件的offsetTop
            - 问题：在哪里才能获取到正确的offsetTop
                - 1. created中获取：不行，无法获取元素，因为部分有v-if的操作
                - 2. mounted中获取：不行，数据还没有获取到
                - 3. 获取到数据的回调：不行，DOM还没有完成渲染，尤其需要渲染图片较多的时候
                - 4. 在created中使用$nextTick获取：不行，因为书图片的高度没有计算在内，渲染延迟的问题导致
                - 5. 在图片加载完成后获取图片的高度才是正确的：要么在updated中获取，要么监听图片加载完成后获取

13. 详情页中-底部工具栏的封装（detailBottonBar）

14. 详情页中回到顶部
    引入mixin的使用方式，便于在多个组件中共用

15. 点击加入购物车
    15.1 监听加到购物车按钮的点击，获取商品信息
        - 监听
        - 获取商品信息，iid/price/iamge/title/desc

    15.2 将商品添加到vuex中
        - 安装vuex
        - 配置vuex
        - 定义mutations，将加购商品添加到state.cartList中
        - 重构代码
            - 将mutations中的代码抽取到actions中，并在mutaions中定义单一功能函数
            - 将mutaions/actions单独抽取到文件中

16. 购物车的展示
    16.1 购物车的导航栏展示
    16.2 购物车商品的展示
        - CartList -> Scroll
        - cartListItem->checkButton
    16.3 加购商品的选中和不选中切换
        - 修改模型对象，改变选中和补选中的状态
    16.4 底部工具栏的汇总
        - 全选加购商品
        - 计算选中加购商品总价格
        - 去结算：展示选中的结算商品数量
