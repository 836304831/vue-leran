
promise是异步编程的一种解决方案,代码见promise基本使用.html
应用场景: 网络异步调用(更适合嵌套网络调用的情况), 请求耗时较长,并需要额外的代码处理拿到的结果, 做到网络请求和处理代码分离

使用情况:对异步操作进行操作


1. then-catch代码实现1:
    // 参数 -> 函数(resolve, reject)
    // resolve, reject本身又是函数
    // new -> 构造函数(1. 保存状态信息, 2. 执行传入的函数)
    // 在执行传入的回调函数时,会传入两个参数,resolve和reject
    then-catch形式
    new Promise((resolve, reject) => {
        // 第一次网络请求的代码
        setTimeout(() => {
            // 成功时调用resolver
            resolve('hello world')

            // 失败时调用reject
            reject('error msg')   // 转到catch执行

            }, 1000)
    }).then((hello_str) => {
        // 第一次拿到结果的处理代码
        console.log(hello_str);
        console.log('hello world');
        console.log('hello world');

        new Promise((resolve,reject) => {
            // 第二次网络请求的代码
            setTimeout(() => {
                resolve()
            }, 1000)
        }).then(() => {
            // 第二次拿到结果的处理代码
            console.log('hell vuejs')
            console.log('hell vuejs')
            console.log('hell vuejs')

            new Promise((resolve, reject) => {
                // 第三次网络请求的代码
                setTimeout(() => {
                    resolve()
                }, 1000)
            }).then(() => {
                // 第三次拿到结果的处理代码
                console.log('hello python')
                console.log('hello python')
                console.log('hello python')
            })
        })
    }).catch((errMsg) => {
        console.log(errMsg);
    })

2. then传入两个函数,分别对应resolve和reject的调用
    new Promise((resolve, reject) => {
            // 第一次网络请求的代码
            setTimeout(() => {
                // 成功时调用resolver
                // resolve('hello world')

                // 失败时调用reject
                reject('error msg')   // 转到catch执行

            }, 1000)
        }).then((hello_str) => {
            // then 可以传入两个函数, 第一个函数在调用resolve时调用,第二个函数在调用reject调用,替代catch实现
            // 第一次拿到结果的处理代码
            console.log(hello_str);
            console.log('hello world');
            console.log('hello world');

            new Promise((resolve,reject) => {
                // 第二次网络请求的代码
                setTimeout(() => {
                    resolve()
                }, 1000)
            }).then(() => {
                // 第二次拿到结果的处理代码
                console.log('hell vuejs')
                console.log('hell vuejs')
                console.log('hell vuejs')

                new Promise((resolve, reject) => {
                    // 第三次网络请求的代码
                    setTimeout(() => {
                        resolve()
                    }, 1000)
                }).then(() => {
                    // 第三次拿到结果的处理代码
                    console.log('hello python')
                    console.log('hello python')
                    console.log('hello python')
                })
            })
        }, (errMsg) => {
            // then的第二个函数,调用reject的时调用
            console.log(errMsg);
        })

3. 使用promise同时处理多个请求,并将多个请求的结果合并起来一同处理
    见04-promise同时处理多个请求.html